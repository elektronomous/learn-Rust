.-----------.
| VARIABLES |
|-----------|
= When a value is immutable, once a value is bound to a name, you can't
  change that value.

    let x = 5;          // x == 5: immutable x's value

= You can create a mutable variable by adding mut to the variable name

    let mut x = 5;      // x == 5: mutable x's value

= immutable variable and constant are different.
  = You're not allowed to use mut with constant.
  = You declare constants using const keyword and the type of the value
    must be annotated.

        const MAX POINTS: u32 = 100 000;

= You can declare a new variable with the same name as a previous variable 
  and the new variable shadows the previous variables.

        let my number = 10;                 // my_number == 10
        let my_number = 30;                 // my_number == 30
        let my_number = my_number + 10;     // my_number == 40

= When you don't specify the let keyword when you reassign(shadowing), the 
  compiler will give you a warning

        let my_number = 10;                 // my_number == 10
        my_number = 20;                     // Error.

= You can shadowing the variable to another type, for example to string:

        let my_number = 10;                 // my_number == 10
        let my_number = "Ten Thousands";    // my_number == "Ten Thousands"

= When you declare a variable with mut, its type is fixed so you can't shad-
  owing the variable to another type.
        
        let mut my_number = 10;             // my_number == 10
        my_number = 20;                     // my_number == 20: OK
        my_number = "Two Thousands";        // ERROR.

= You can't also shadowing using mut

        let my_number = 10;                 // my_number == 10
        let mut my_number = 20;             // ERROR

= Rust is a statically typed language, which means that it must know the types
  of all variables at compile time
= Scalar type represents a single value.
= Rust has four primary scalar types:
  = integers
  = floating-point numbers,
  = Booleans
  = characters

.-----------.
|  INTEGER  |
|-----------|
= An integer => a number without fractional component.

    .------------------------------.
    |  LENGTH  | SIGNED | UNSIGNED |
    |----------|--------|----------|
    | 8-bit    | i8     | u8       |
    | 16-bit   | i16    | u16      |
    | 32-bit   | i32    | u32      | 
    | 64-bit   | i64    | u64      |
    | 128-bit  | i128   | u128     |
    | arch     | isize  | usize    |
    |------------------------------|

= Each signed variant can store numbers from -(2^n-1) to 2^n-1
= isize and usize types depend on the kind of computer your program is running on.
  64-bit if you're in 64-bit architecture and do so with 32-bit.

    .-----------------------------------.
    |  NUMBER LITERALS | Example        |
    |------------------|----------------|
    | Decimal          | 98 222         |
    | Hex              | 0xff           | 
    | Ocal             | 0x77           |
    | Binary           | 0b1111 0000    |
    | Byte (u8 only)   | b'A'           |
    |-----------------------------------|

.----------------.
| FLOATING-POINT |
|----------------|

= Rust floating-point numbers are numbers with decimal points.
= Rust floating-point types are f32 and f64, which are 32 bits and 64 bits in size.
= Rust has Booleans type which is two possible values: true and false.
= Rust's char type is four bytes(32-bit) in size represents Unicode scalar.
= Note that char literals are spcified with single quotes(''), as opposed to string
  literals which use double quotes("")

.----------------.
| COMPOUND-TYPES |
|----------------|
= Compound types can group multiple values into one type.
  = Rust has two primitive Compound types: tuples and arrays.

.-------.
| TUPLE |
|-------|
= A tuple is general way of grouping together some number of other values with a
  variety of types into one Compound types.

        let tup: (i32, f64, bool) = (500, 10.55, true);

= Tuples have a fixed length: once declared, they cannot grow or shrink.


.-------.
| ARRAY |
|-------|
= You can also use array, but it must have the same type and its has a fixed length.

        let months = [
            "JANUARY", "FEBRUARY", "MARCH", "APRIL", "MAY", "JUNE", JULY",
            "AGUSTUS", "SEPTEMBER", "OKTOBER", "NOVEMBER", "DESEMBER"
        ];

        let arr: [i32; 5] = [1, 2, 3, 4, 5];

= After the semicolon, the number 5 indicates the element contains five elements.
= You can create an array that contains the same value for each element using the semi-
  colon

        let arr = [3; 5];                   // => [3,3,3,3,3]

= Rust uses snake case as the conventional style for function and variables name.


.----------.
| FUNCTION |
|----------|

= Function can also be defined to have parameters, which are special variables that are
  part of a function's signature.
= When a function has parameters, you can provide it with concrete values for those para-
  meters that's called argument.
= In function signatures, you must declare the type of each parameter.
= When function return a value, you must declare their type after an arrow ->
= You can return a value without keyword return by create an expression.
  and the type of the function return value must be declare

        fn some main() -> i32 {
          5                       // => 5: return 5
        }

        fn some main(x: i32, y:u32) -> i32 {
          x+y                     // => x+y: return the result of x+y
        }

.--------------------------.
| STATEMENT AND EXPRESSION |
|--------------------------|

= Statements are instructions that perform some action and do not return a value.
= Expressions evaluate to a resulting value.


        fn some main() {
          let y = 10;
        }

= Function definitions, declare a variable and other action, these don't return a value.
= Calling a function/macro is an expression.
= The block that we use to create a new scope {}, is an expression:

        fn main() {
          let x = 5;

          let y = {
            let x = 3;
            x + 1
          };

          println!("The value of y is: {}", y);
        }

= Note the line (x+1), expression do not include ending semicolon.
  = If you add a semicolon to the end of an expression, you turn it into a statement.
    Which will not return a value.

.--------------.
| IF STATEMENT |
|--------------|

= An if expression allows you to branch your code depending on conditions.

      if condition that result in bool {

        // block of code that you wanna run if true;

      } else {
        
        // block of code that you wanna run if false;

      }

= Condition here must be a Booleans.

      if number {
        // block of code
      }

  = This will produce an error, because it condition evaluate is integer.

= Rust will not automatically try to convert non-Boolean types to Boolean(unlike JavaScript
  or Ruby).
= You can use if combine with an expression with let:

      let am_i_handsome = true;
      let myself = if am_i_handsome {
        "100%"
      } else {
        "90%"
      };

= When using if condition expression like this make sure the both block of code which the true
  block and the false block, return the same type

      let myself = if am_i_handsome {
        "100%"
      } else {
        50          // ERROR
      }

.----------------.
| LOOP STATEMENT |
|----------------|

= A loop runs throuh the code inside the loop body to the end and then starts immediately back
  at the beginning.

      fn main() {
        loop {
          println!("again!");     // => "again!": run until forever
        }
      }

= You can add the value you want to returned after the break expression you use to stop the loop:

      fn main() {
        let mut n_factorial = 5;
        let mut result = 1;

        let factorial_result = loop {
          result *= n_factorial;

          n_factorial -= 1;

          if n_factorial != 0 {
            break result;           // => result
          }
        }
      }