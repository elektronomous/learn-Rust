.-----------.
| OWNERSHIP |
|-----------|

= Memory is managed through a system of ownership with a set of rules that the compiler
  checks at compile time.
= Ownership has rules:
    = Each value in Rust has a variable that's called its owner.
    = There can be only one owner at a time.
    = When the owner goes out of scope, the value will be dropped.
= A scope is the range within the program for which an item is valid.

      {                           // s is not valid here; it's not yet declared
        let s = "hello";          // s is valid from this point forward.

        // do stuff with s
      }                           // this scope is now over, and s is no longer valid.


.-------------.
| STRING TYPE |
|-------------|

= String literals is immutable, you can't change the value after you defined it.
= Another Rust String type is allocated on the heap and as as such is able to store an
  amount of text that is unknown to us at compile time.

      let s = String::from("hello");        // create a String from a string literal using
                                            // the `from` function.

= the ::(double color) operator allows us to namespace this particular `from` function under
  the String type rather than using some sort of name like string_from.

      let mut s = String::from("hello");

      s.push_str(", world!");               // push_str() appends a litteral to a String

      println("{}", s);                     // => 'hello, world!'

= Why can String be mutated but literals cannot ?
  = In case of a string literal, we know the contents at compile time, so the text is hardcoded
    directly into the final executable.